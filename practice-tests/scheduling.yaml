######COMMANDS#####
# kubectl taint node node01 color=red:NoSchedule #add "-" at the end to remove the taint
# kubectl label node node01 color=red
##################
#https://github.com/kubernetes/community/blob/master/contributors/devel/sig-scheduling/scheduling_code_hierarchy_overview.md

#manually scheduling the pod if there are no schedulers present on the cluster
apiVersion: v1
kind: Pod
metadata:
  name: nginx
spec:
  containers:
  -  image: nginx
     name: nginx
     resources:
       limits:
         cpu: "200m"
         memory: "200Mi"
  nodeName: worker-1
---

#pod with toleration
apiVersion: v1
kind: Pod
metadata:
  name: bee
spec:
  containers:
  -  image: nginx
     name: nginx
     resources:
       limits:
         cpu: "200m"
         memory: "200Mi"
  tolerations:
  - key: "spray"
    operator: "Equal"
    value: "mortein"
    effect: "NoSchedule"
---

#Deployment with node affinity
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: red
  name: red
  namespace: default
spec:
  progressDeadlineSeconds: 600
  replicas: 2
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: red
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: red
    spec:
      containers:
      - image: nginx
        imagePullPolicy: Always
        name: nginx
        resources:
          limits:
            cpu: "200m"
            memory: "200Mi"
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      terminationGracePeriodSeconds: 30
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: "node-role.kubernetes.io/control-plane"
                operator: "Exists"
                
---
#sample deemonset spec
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: elasticsearch
  namespace: kube-system
  labels:
    app: elasticsearch
spec:
  selector:
    matchLabels:
      app: elasticsearch
  template:
    metadata:
      name: elasticsearch
      labels:
        app: elasticsearch
    spec:
      containers:
      - name: elasticsearch
        image: registry.k8s.io/fluentd-elasticsearch:1.20
        resources:
          limits:
            cpu: 1
            memory: "1Gi"
---

#Static pods - it should be placed on a folder on a node (find kubelet config file from kubelet service file to identify this folder)
#and kubelet will read this directory and creates a pod, so we don't need control-plane at all.
apiVersion: v1 
kind: Pod 
metadata:
  name: static-busybox
spec:
  containers:
  - name: static-busybox
    image: busybox 
    resources:
      limits:
        cpu: "100m"
        memory: "100Mi"
---
####Custom Scheduler configurations####
#custom scheduler configmap which is mounted as a volume in custom-schduler pod
apiVersion: v1
data:
  my-scheduler-config.yaml: |
    apiVersion: kubescheduler.config.k8s.io/v1
    kind: KubeSchedulerConfiguration
    profiles:
      - schedulerName: my-scheduler
    leaderElection:
      leaderElect: false
kind: ConfigMap
metadata:
  name: my-scheduler-config
  namespace: kube-system
---

#custom scheduler pod (using default k8s schduler image)
apiVersion: v1
kind: Pod
metadata:
  labels:
    run: my-scheduler
  name: my-scheduler
  namespace: kube-system
spec:
  serviceAccountName: my-scheduler
  containers:
  - command:
    - /usr/local/bin/kube-scheduler
    - --config=/etc/kubernetes/my-scheduler/my-scheduler-config.yaml
    image: registry.k8s.io/kube-scheduler:v1.29.0
    livenessProbe:
      httpGet:
        path: /healthz
        port: 10259
        scheme: HTTPS
      initialDelaySeconds: 15
    name: kube-second-scheduler
    readinessProbe:
      httpGet:
        path: /healthz
        port: 10259
        scheme: HTTPS
    resources:
      requests:
        cpu: '0.1'
      limits:
        cpu: 1
        memory: "1Gi"
    securityContext:
      privileged: false
    volumeMounts:
      - name: config-volume
        mountPath: /etc/kubernetes/my-scheduler
  hostNetwork: false
  hostPID: false
  volumes:
    - name: config-volume
      configMap:
        name: my-scheduler-config
---

#sample pod to use the custom scheduler
apiVersion: v1
kind: Pod 
metadata:
  name: nginx
spec:
  containers:
  - image: nginx
    name: nginx
    resources:
      limits:
        cpu: "200m"
        memory: "200Mi"
  schedulerName: my-scheduler
---

